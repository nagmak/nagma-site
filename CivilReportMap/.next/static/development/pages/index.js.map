{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js","webpack:///delegated ./node_modules/react/index.js from dll-reference dll_7aff549c98b978433226","webpack:///./pages/index.js","webpack:///external \"dll_7aff549c98b978433226\""],"sourcesContent":["\n    (window.__NEXT_P=window.__NEXT_P||[]).push([\"/\", function() {\n      var page = require(\"/Users/nugget/Documents/CSProjects/CivilReportMap/pages/index.js\")\n      if(module.hot) {\n        module.hot.accept(\"/Users/nugget/Documents/CSProjects/CivilReportMap/pages/index.js\", function() {\n          if(!next.router.components[\"/\"]) return\n          var updatedPage = require(\"/Users/nugget/Documents/CSProjects/CivilReportMap/pages/index.js\")\n          next.router.update(\"/\", updatedPage.default || updatedPage)\n        })\n      }\n      return { page: page.default || page }\n    }]);\n  ","module.exports = (__webpack_require__(/*! dll-reference dll_7aff549c98b978433226 */ \"dll-reference dll_7aff549c98b978433226\"))(\"./node_modules/react/index.js\");","const Index = () => (\n    <div>\n      <p>Hello Next.js</p>\n    </div>\n  );\n  \n\n\n  var apiKey = '<INSERT API KEY HERE>';\nvar map;\nvar drawingManager;\nvar lat, long;\n// var selectedMarkers = [];\n// var markerType;\n\n// var setUnverifiableMark = (markerType) =>{\n//     this.markerType = markerType;\n// }\n\nfunction initMap() {\n    map = new google.maps.Map(document.getElementById('map'), {\n        center: { lat: 43.6532, lng: -79.3832 },\n        zoom: 15\n    });\n\n\n    // WORKING ON SAVING MARKERRS TO THE GOOGLE MAPS \n    // MAYBE NEED TO GET THESE FROM THE DATABASE INSTEAD? to ensure accuracy?\n    // if (selectedMarkers !== null){\n    //     selectedMarkers.forEach(function(marker){\n    //         var marker = new google.maps.Marker({\n    //             position: new google.maps.LatLng(Number(marker.latitude), Number(marker.longitude)),\n    //             map: map,\n    //             draggable: true,\n    //             icon: markerType,\n    //         });\n    //     });\n    // };\n\n    drawingManager = new google.maps.drawing.DrawingManager({\n        drawingControl: false\n    });\n    /*drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: google.maps.drawing.OverlayType.POLYLINE,\n        drawingControl: false,\n        drawingControlOptions: {\n            position: google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: [\n                google.maps.drawing.OverlayType.POLYLINE\n            ]\n        },\n        polylineOptions: {\n            strokeColor: '#000000'\n        }\n    });*/\n    drawingManager.setMap(map);\n    // Snap-to-road when the polyline is completed.\n    drawingManager.addListener('polylinecomplete', function(poly) {\n        var path = poly.getPath();\n        polylines.push(poly);\n        placeIdArray = [];\n        runSnapToRoad(path);\n    });\n\n    // Clear button. Click to remove all polylines.\n    $('#clear').click(function(ev) {\n        for (var i = 0; i < polylines.length; ++i) {\n            polylines[i].setMap(null);\n        }\n        polylines = [];\n        ev.preventDefault();\n        return false;\n    });\n\n    var displayLatitude = document.getElementById('latitude');\n    var displayLongitude = document.getElementById('longitude');\n    google.maps.event.addListener(map, \"rightclick\", function(event) {\n         lat = event.latLng.lat();\n         long = event.latLng.lng();\n        //  var db = req.db;\n        //  // Set our collection\n        // var regularUser = db.get('regularUser');\n         // populate yor box/field with lat, lng\n        //  alert(\"Lat=\" + lat + \"; Lng=\" + lng);\n        // selectedMarkers.push(addMarker(event.latLng, map));\n        displayLatitude.value = lat;\n        displayLongitude.value = long;\n        getCloseRoad(event.latLng);\n        //showMapMenu(event.latLng);\n    });\n    // google.maps.event.addDomListener(window, 'load', initMap);\n    /*google.maps.event.addListener(map, \"mouseout\", function(event) {\n        removeMapMenu();\n    });*/\n}\n\n\n/*\n   Adds the marker to the map\n   (needs work such as taking all the stored points in the database and placing them on the map)\n   */\n\nfunction addMarker(location, map) {\n    var  unverifiedMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'green',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'green',\n        strokeWeight: 14,\n    };\n       \n    var  verifiedMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'red',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'red',\n        strokeWeight: 14,\n    };\n       \n    var  falseMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'gray',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'gray',\n        strokeWeight: 14,\n    };\n       \n    var  dispatchedMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'blue',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'blue',\n        strokeWeight: 14,\n    };\n    \n    // setUnverifiableMark(unverifiedMark);\n    var marker = new google.maps.Marker({\n        position: location,\n        map: map,\n        draggable: true,\n        icon: unverifiedMark,\n    });\n}\n\nfunction getCloseRoad(caurrentLatLng) {\n    pathCoord = [caurrentLatLng, caurrentLatLng];\n    var pathRoad = new google.maps.Polyline({\n        path: pathCoord,\n        strokeOpacity: 0,\n        strokeWeight: 1\n    });\n    pathRoad.setMap(map);\n    runSnapToRoad(pathRoad.getPath());\n\n    //https://roads.googleapis.com/v1/nearestRoads?parameters&key=AIzaSyCA7uRtmPo9Dij18BiD-KUCejMR4HBQJPk\n}\n\nfunction getCanvasXY(caurrentLatLng) {\n    var scale = Math.pow(2, map.getZoom());\n    var nw = new google.maps.LatLng(\n        map.getBounds().getNorthEast().lat(),\n        map.getBounds().getSouthWest().lng()\n    );\n    var worldCoordinateNW = map.getProjection().fromLatLngToPoint(nw);\n    var worldCoordinate = map.getProjection().fromLatLngToPoint(caurrentLatLng);\n    var caurrentLatLngOffset = new google.maps.Point(\n        Math.floor((worldCoordinate.x - worldCoordinateNW.x) * scale),\n        Math.floor((worldCoordinate.y - worldCoordinateNW.y) * scale)\n    );\n    return caurrentLatLngOffset;\n}\n\nfunction setMenuXY(caurrentLatLng) {\n    var mapWidth = $('#map_canvas').width();\n    var mapHeight = $('#map_canvas').height();\n    var menuWidth = $('.contextmenu').width();\n    var menuHeight = $('.contextmenu').height();\n    var clickedPosition = getCanvasXY(caurrentLatLng);\n    var x = clickedPosition.x;\n    var y = clickedPosition.y;\n\n    if ((mapWidth - x) < menuWidth)\n        x = x - menuWidth;\n    if ((mapHeight - y) < menuHeight)\n        y = y - menuHeight;\n\n    $('.contextmenu').css('left', x);\n    $('.contextmenu').css('top', y);\n};\n\nfunction showMapMenu(caurrentLatLng, dist) {\n    var projection;\n    var contextmenuDir;\n    if( dist <= 25 ){\n        projection = map.getProjection();\n        $('.contextmenu').remove();\n        contextmenuDir = document.createElement(\"div\");\n        $(contextmenuDir).attr(\"tabindex\", -1);\n        contextmenuDir.className = 'contextmenu';\n        contextmenuDir.innerHTML = \"<a id='reportProblem' data-toggle='modal' data-target='#problemModal'><div class=context>Report a Problem<\\/div><\\/a><a id='menu2'><div class=context>menu item 2<\\/div><\\/a>\";\n        $(map.getDiv()).append(contextmenuDir);\n\n        setMenuXY(caurrentLatLng);\n\n        contextmenuDir.style.visibility = \"visible\";\n        $(contextmenuDir).focus();\n\n        //console.log(document.activeElement);\n\n        $(contextmenuDir).focusout(function() {\n            $('.contextmenu').remove();\n        });\n    }\n\n}\n\n/*function removeMapMenu(){\n    $('.contextmenu').remove();\n}\n  //\n  drawingManager.setMap(map);\n\n\n}\n*/\n// Snap a user-created polyline to roads and draw the snapped path\nfunction runSnapToRoad(path) {\n    var pathValues = [];\n    var currPts = path.getAt(0);\n    for (var i = 0; i < path.getLength(); i++) {\n        pathValues.push(path.getAt(i).toUrlValue());\n    }\n    console.log(pathValues);\n\n    $.get('https://roads.googleapis.com/v1/snapToRoads', {\n        interpolate: true,\n        key: apiKey,\n        path: pathValues.join('|')\n    }, function(data) {\n        processSnapToRoadResponse(data, currPts);\n\n        //drawSnappedPolyline();\n    });\n}\n\n// Store snapped polyline returned by the snap-to-road service.\nfunction processSnapToRoadResponse(data, currPts) {\n    snappedCoordinates = [];\n    placeIdArray = [];\n    var dist = 0;\n    for (var i = 0; i < data.snappedPoints.length; i++) {\n        var latlng = new google.maps.LatLng(\n            data.snappedPoints[i].location.latitude,\n            data.snappedPoints[i].location.longitude);\n        snappedCoordinates.push(latlng);\n        placeIdArray.push(data.snappedPoints[i].placeId);\n    }\n    dist = google.maps.geometry.spherical.computeDistanceBetween(latlng, currPts);\n    console.log(google.maps.geometry.spherical.computeDistanceBetween(latlng, currPts));\n    showMapMenu(currPts, dist);\n}\n\n// Draws the snapped polyline (after processing snap-to-road response).\n/*function drawSnappedPolyline() {\n    var snappedPolyline = new google.maps.Polyline({\n        path: snappedCoordinates,\n        strokeColor: 'black',\n        strokeWeight: 3,\n        opacity: 1\n    });\n\n    snappedPolyline.setMap(map);\n    //polylines.push(snappedPolyline);\n}\n*/\n\nvar getLat = () => {\n    console.log(\"dis\" + lat);\n    return lat;\n};\n\nvar getLong = () => {\n    console.log(\"dis2\" + long);\n    return long;\n};\n\n  export default Index;","module.exports = dll_7aff549c98b978433226;"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;;;;;;;;;;;;;;;;;;ACAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AAGA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;AASA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClSA;;;;A","sourceRoot":""}