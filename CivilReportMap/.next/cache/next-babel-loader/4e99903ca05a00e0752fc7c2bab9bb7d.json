{"ast":null,"code":"var _jsxFileName = \"/Users/nugget/Documents/CSProjects/CivilReportMap/pages/index.js\";\nimport React from \"react\";\n\nvar Index = function Index() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 2\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3\n    },\n    __self: this\n  }, \"Hello Next.js\"));\n};\n\nvar apiKey = '<INSERT API KEY HERE>';\nvar map;\nvar drawingManager;\n\nvar lat, _long; // var selectedMarkers = [];\n// var markerType;\n// var setUnverifiableMark = (markerType) =>{\n//     this.markerType = markerType;\n// }\n\n\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById('map'), {\n    center: {\n      lat: 43.6532,\n      lng: -79.3832\n    },\n    zoom: 15\n  }); // WORKING ON SAVING MARKERRS TO THE GOOGLE MAPS \n  // MAYBE NEED TO GET THESE FROM THE DATABASE INSTEAD? to ensure accuracy?\n  // if (selectedMarkers !== null){\n  //     selectedMarkers.forEach(function(marker){\n  //         var marker = new google.maps.Marker({\n  //             position: new google.maps.LatLng(Number(marker.latitude), Number(marker.longitude)),\n  //             map: map,\n  //             draggable: true,\n  //             icon: markerType,\n  //         });\n  //     });\n  // };\n\n  drawingManager = new google.maps.drawing.DrawingManager({\n    drawingControl: false\n  });\n  /*drawingManager = new google.maps.drawing.DrawingManager({\n      drawingMode: google.maps.drawing.OverlayType.POLYLINE,\n      drawingControl: false,\n      drawingControlOptions: {\n          position: google.maps.ControlPosition.TOP_CENTER,\n          drawingModes: [\n              google.maps.drawing.OverlayType.POLYLINE\n          ]\n      },\n      polylineOptions: {\n          strokeColor: '#000000'\n      }\n  });*/\n\n  drawingManager.setMap(map); // Snap-to-road when the polyline is completed.\n\n  drawingManager.addListener('polylinecomplete', function (poly) {\n    var path = poly.getPath();\n    polylines.push(poly);\n    placeIdArray = [];\n    runSnapToRoad(path);\n  }); // Clear button. Click to remove all polylines.\n\n  $('#clear').click(function (ev) {\n    for (var i = 0; i < polylines.length; ++i) {\n      polylines[i].setMap(null);\n    }\n\n    polylines = [];\n    ev.preventDefault();\n    return false;\n  });\n  var displayLatitude = document.getElementById('latitude');\n  var displayLongitude = document.getElementById('longitude');\n  google.maps.event.addListener(map, \"rightclick\", function (event) {\n    lat = event.latLng.lat();\n    _long = event.latLng.lng(); //  var db = req.db;\n    //  // Set our collection\n    // var regularUser = db.get('regularUser');\n    // populate yor box/field with lat, lng\n    //  alert(\"Lat=\" + lat + \"; Lng=\" + lng);\n    // selectedMarkers.push(addMarker(event.latLng, map));\n\n    displayLatitude.value = lat;\n    displayLongitude.value = _long;\n    getCloseRoad(event.latLng); //showMapMenu(event.latLng);\n  }); // google.maps.event.addDomListener(window, 'load', initMap);\n\n  /*google.maps.event.addListener(map, \"mouseout\", function(event) {\n      removeMapMenu();\n  });*/\n}\n/*\n   Adds the marker to the map\n   (needs work such as taking all the stored points in the database and placing them on the map)\n   */\n\n\nfunction addMarker(location, map) {\n  var unverifiedMark = {\n    path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n    fillColor: 'green',\n    fillOpacity: 0.8,\n    scale: 1.5,\n    strokeColor: 'green',\n    strokeWeight: 14\n  };\n  var verifiedMark = {\n    path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n    fillColor: 'red',\n    fillOpacity: 0.8,\n    scale: 1.5,\n    strokeColor: 'red',\n    strokeWeight: 14\n  };\n  var falseMark = {\n    path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n    fillColor: 'gray',\n    fillOpacity: 0.8,\n    scale: 1.5,\n    strokeColor: 'gray',\n    strokeWeight: 14\n  };\n  var dispatchedMark = {\n    path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n    fillColor: 'blue',\n    fillOpacity: 0.8,\n    scale: 1.5,\n    strokeColor: 'blue',\n    strokeWeight: 14\n  }; // setUnverifiableMark(unverifiedMark);\n\n  var marker = new google.maps.Marker({\n    position: location,\n    map: map,\n    draggable: true,\n    icon: unverifiedMark\n  });\n}\n\nfunction getCloseRoad(caurrentLatLng) {\n  pathCoord = [caurrentLatLng, caurrentLatLng];\n  var pathRoad = new google.maps.Polyline({\n    path: pathCoord,\n    strokeOpacity: 0,\n    strokeWeight: 1\n  });\n  pathRoad.setMap(map);\n  runSnapToRoad(pathRoad.getPath()); //https://roads.googleapis.com/v1/nearestRoads?parameters&key=AIzaSyCA7uRtmPo9Dij18BiD-KUCejMR4HBQJPk\n}\n\nfunction getCanvasXY(caurrentLatLng) {\n  var scale = Math.pow(2, map.getZoom());\n  var nw = new google.maps.LatLng(map.getBounds().getNorthEast().lat(), map.getBounds().getSouthWest().lng());\n  var worldCoordinateNW = map.getProjection().fromLatLngToPoint(nw);\n  var worldCoordinate = map.getProjection().fromLatLngToPoint(caurrentLatLng);\n  var caurrentLatLngOffset = new google.maps.Point(Math.floor((worldCoordinate.x - worldCoordinateNW.x) * scale), Math.floor((worldCoordinate.y - worldCoordinateNW.y) * scale));\n  return caurrentLatLngOffset;\n}\n\nfunction setMenuXY(caurrentLatLng) {\n  var mapWidth = $('#map_canvas').width();\n  var mapHeight = $('#map_canvas').height();\n  var menuWidth = $('.contextmenu').width();\n  var menuHeight = $('.contextmenu').height();\n  var clickedPosition = getCanvasXY(caurrentLatLng);\n  var x = clickedPosition.x;\n  var y = clickedPosition.y;\n  if (mapWidth - x < menuWidth) x = x - menuWidth;\n  if (mapHeight - y < menuHeight) y = y - menuHeight;\n  $('.contextmenu').css('left', x);\n  $('.contextmenu').css('top', y);\n}\n\n;\n\nfunction showMapMenu(caurrentLatLng, dist) {\n  var projection;\n  var contextmenuDir;\n\n  if (dist <= 25) {\n    projection = map.getProjection();\n    $('.contextmenu').remove();\n    contextmenuDir = document.createElement(\"div\");\n    $(contextmenuDir).attr(\"tabindex\", -1);\n    contextmenuDir.className = 'contextmenu';\n    contextmenuDir.innerHTML = \"<a id='reportProblem' data-toggle='modal' data-target='#problemModal'><div class=context>Report a Problem<\\/div><\\/a><a id='menu2'><div class=context>menu item 2<\\/div><\\/a>\";\n    $(map.getDiv()).append(contextmenuDir);\n    setMenuXY(caurrentLatLng);\n    contextmenuDir.style.visibility = \"visible\";\n    $(contextmenuDir).focus(); //console.log(document.activeElement);\n\n    $(contextmenuDir).focusout(function () {\n      $('.contextmenu').remove();\n    });\n  }\n}\n/*function removeMapMenu(){\n    $('.contextmenu').remove();\n}\n  //\n  drawingManager.setMap(map);\n\n\n}\n*/\n// Snap a user-created polyline to roads and draw the snapped path\n\n\nfunction runSnapToRoad(path) {\n  var pathValues = [];\n  var currPts = path.getAt(0);\n\n  for (var i = 0; i < path.getLength(); i++) {\n    pathValues.push(path.getAt(i).toUrlValue());\n  }\n\n  console.log(pathValues);\n  $.get('https://roads.googleapis.com/v1/snapToRoads', {\n    interpolate: true,\n    key: apiKey,\n    path: pathValues.join('|')\n  }, function (data) {\n    processSnapToRoadResponse(data, currPts); //drawSnappedPolyline();\n  });\n} // Store snapped polyline returned by the snap-to-road service.\n\n\nfunction processSnapToRoadResponse(data, currPts) {\n  snappedCoordinates = [];\n  placeIdArray = [];\n  var dist = 0;\n\n  for (var i = 0; i < data.snappedPoints.length; i++) {\n    var latlng = new google.maps.LatLng(data.snappedPoints[i].location.latitude, data.snappedPoints[i].location.longitude);\n    snappedCoordinates.push(latlng);\n    placeIdArray.push(data.snappedPoints[i].placeId);\n  }\n\n  dist = google.maps.geometry.spherical.computeDistanceBetween(latlng, currPts);\n  console.log(google.maps.geometry.spherical.computeDistanceBetween(latlng, currPts));\n  showMapMenu(currPts, dist);\n} // Draws the snapped polyline (after processing snap-to-road response).\n\n/*function drawSnappedPolyline() {\n    var snappedPolyline = new google.maps.Polyline({\n        path: snappedCoordinates,\n        strokeColor: 'black',\n        strokeWeight: 3,\n        opacity: 1\n    });\n\n    snappedPolyline.setMap(map);\n    //polylines.push(snappedPolyline);\n}\n*/\n\n\nvar getLat = function getLat() {\n  console.log(\"dis\" + lat);\n  return lat;\n};\n\nvar getLong = function getLong() {\n  console.log(\"dis2\" + _long);\n  return _long;\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/nugget/Documents/CSProjects/CivilReportMap/pages/index.js"],"names":["Index","apiKey","map","drawingManager","lat","long","initMap","google","maps","Map","document","getElementById","center","lng","zoom","drawing","DrawingManager","drawingControl","setMap","addListener","poly","path","getPath","polylines","push","placeIdArray","runSnapToRoad","$","click","ev","i","length","preventDefault","displayLatitude","displayLongitude","event","latLng","value","getCloseRoad","addMarker","location","unverifiedMark","fillColor","fillOpacity","scale","strokeColor","strokeWeight","verifiedMark","falseMark","dispatchedMark","marker","Marker","position","draggable","icon","caurrentLatLng","pathCoord","pathRoad","Polyline","strokeOpacity","getCanvasXY","Math","pow","getZoom","nw","LatLng","getBounds","getNorthEast","getSouthWest","worldCoordinateNW","getProjection","fromLatLngToPoint","worldCoordinate","caurrentLatLngOffset","Point","floor","x","y","setMenuXY","mapWidth","width","mapHeight","height","menuWidth","menuHeight","clickedPosition","css","showMapMenu","dist","projection","contextmenuDir","remove","createElement","attr","className","innerHTML","getDiv","append","style","visibility","focus","focusout","pathValues","currPts","getAt","getLength","toUrlValue","console","log","get","interpolate","key","join","data","processSnapToRoadResponse","snappedCoordinates","snappedPoints","latlng","latitude","longitude","placeId","geometry","spherical","computeDistanceBetween","getLat","getLong"],"mappings":"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","sourcesContent":["const Index = () => (\n    <div>\n      <p>Hello Next.js</p>\n    </div>\n  );\n  \n\n\n  var apiKey = '<INSERT API KEY HERE>';\nvar map;\nvar drawingManager;\nvar lat, long;\n// var selectedMarkers = [];\n// var markerType;\n\n// var setUnverifiableMark = (markerType) =>{\n//     this.markerType = markerType;\n// }\n\nfunction initMap() {\n    map = new google.maps.Map(document.getElementById('map'), {\n        center: { lat: 43.6532, lng: -79.3832 },\n        zoom: 15\n    });\n\n\n    // WORKING ON SAVING MARKERRS TO THE GOOGLE MAPS \n    // MAYBE NEED TO GET THESE FROM THE DATABASE INSTEAD? to ensure accuracy?\n    // if (selectedMarkers !== null){\n    //     selectedMarkers.forEach(function(marker){\n    //         var marker = new google.maps.Marker({\n    //             position: new google.maps.LatLng(Number(marker.latitude), Number(marker.longitude)),\n    //             map: map,\n    //             draggable: true,\n    //             icon: markerType,\n    //         });\n    //     });\n    // };\n\n    drawingManager = new google.maps.drawing.DrawingManager({\n        drawingControl: false\n    });\n    /*drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: google.maps.drawing.OverlayType.POLYLINE,\n        drawingControl: false,\n        drawingControlOptions: {\n            position: google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: [\n                google.maps.drawing.OverlayType.POLYLINE\n            ]\n        },\n        polylineOptions: {\n            strokeColor: '#000000'\n        }\n    });*/\n    drawingManager.setMap(map);\n    // Snap-to-road when the polyline is completed.\n    drawingManager.addListener('polylinecomplete', function(poly) {\n        var path = poly.getPath();\n        polylines.push(poly);\n        placeIdArray = [];\n        runSnapToRoad(path);\n    });\n\n    // Clear button. Click to remove all polylines.\n    $('#clear').click(function(ev) {\n        for (var i = 0; i < polylines.length; ++i) {\n            polylines[i].setMap(null);\n        }\n        polylines = [];\n        ev.preventDefault();\n        return false;\n    });\n\n    var displayLatitude = document.getElementById('latitude');\n    var displayLongitude = document.getElementById('longitude');\n    google.maps.event.addListener(map, \"rightclick\", function(event) {\n         lat = event.latLng.lat();\n         long = event.latLng.lng();\n        //  var db = req.db;\n        //  // Set our collection\n        // var regularUser = db.get('regularUser');\n         // populate yor box/field with lat, lng\n        //  alert(\"Lat=\" + lat + \"; Lng=\" + lng);\n        // selectedMarkers.push(addMarker(event.latLng, map));\n        displayLatitude.value = lat;\n        displayLongitude.value = long;\n        getCloseRoad(event.latLng);\n        //showMapMenu(event.latLng);\n    });\n    // google.maps.event.addDomListener(window, 'load', initMap);\n    /*google.maps.event.addListener(map, \"mouseout\", function(event) {\n        removeMapMenu();\n    });*/\n}\n\n\n/*\n   Adds the marker to the map\n   (needs work such as taking all the stored points in the database and placing them on the map)\n   */\n\nfunction addMarker(location, map) {\n    var  unverifiedMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'green',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'green',\n        strokeWeight: 14,\n    };\n       \n    var  verifiedMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'red',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'red',\n        strokeWeight: 14,\n    };\n       \n    var  falseMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'gray',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'gray',\n        strokeWeight: 14,\n    };\n       \n    var  dispatchedMark = {\n        path: 'M 2,2 2,2 2,2 2,2 2,2 z',\n        fillColor: 'blue',\n        fillOpacity: 0.8,\n        scale: 1.5,\n        strokeColor: 'blue',\n        strokeWeight: 14,\n    };\n    \n    // setUnverifiableMark(unverifiedMark);\n    var marker = new google.maps.Marker({\n        position: location,\n        map: map,\n        draggable: true,\n        icon: unverifiedMark,\n    });\n}\n\nfunction getCloseRoad(caurrentLatLng) {\n    pathCoord = [caurrentLatLng, caurrentLatLng];\n    var pathRoad = new google.maps.Polyline({\n        path: pathCoord,\n        strokeOpacity: 0,\n        strokeWeight: 1\n    });\n    pathRoad.setMap(map);\n    runSnapToRoad(pathRoad.getPath());\n\n    //https://roads.googleapis.com/v1/nearestRoads?parameters&key=AIzaSyCA7uRtmPo9Dij18BiD-KUCejMR4HBQJPk\n}\n\nfunction getCanvasXY(caurrentLatLng) {\n    var scale = Math.pow(2, map.getZoom());\n    var nw = new google.maps.LatLng(\n        map.getBounds().getNorthEast().lat(),\n        map.getBounds().getSouthWest().lng()\n    );\n    var worldCoordinateNW = map.getProjection().fromLatLngToPoint(nw);\n    var worldCoordinate = map.getProjection().fromLatLngToPoint(caurrentLatLng);\n    var caurrentLatLngOffset = new google.maps.Point(\n        Math.floor((worldCoordinate.x - worldCoordinateNW.x) * scale),\n        Math.floor((worldCoordinate.y - worldCoordinateNW.y) * scale)\n    );\n    return caurrentLatLngOffset;\n}\n\nfunction setMenuXY(caurrentLatLng) {\n    var mapWidth = $('#map_canvas').width();\n    var mapHeight = $('#map_canvas').height();\n    var menuWidth = $('.contextmenu').width();\n    var menuHeight = $('.contextmenu').height();\n    var clickedPosition = getCanvasXY(caurrentLatLng);\n    var x = clickedPosition.x;\n    var y = clickedPosition.y;\n\n    if ((mapWidth - x) < menuWidth)\n        x = x - menuWidth;\n    if ((mapHeight - y) < menuHeight)\n        y = y - menuHeight;\n\n    $('.contextmenu').css('left', x);\n    $('.contextmenu').css('top', y);\n};\n\nfunction showMapMenu(caurrentLatLng, dist) {\n    var projection;\n    var contextmenuDir;\n    if( dist <= 25 ){\n        projection = map.getProjection();\n        $('.contextmenu').remove();\n        contextmenuDir = document.createElement(\"div\");\n        $(contextmenuDir).attr(\"tabindex\", -1);\n        contextmenuDir.className = 'contextmenu';\n        contextmenuDir.innerHTML = \"<a id='reportProblem' data-toggle='modal' data-target='#problemModal'><div class=context>Report a Problem<\\/div><\\/a><a id='menu2'><div class=context>menu item 2<\\/div><\\/a>\";\n        $(map.getDiv()).append(contextmenuDir);\n\n        setMenuXY(caurrentLatLng);\n\n        contextmenuDir.style.visibility = \"visible\";\n        $(contextmenuDir).focus();\n\n        //console.log(document.activeElement);\n\n        $(contextmenuDir).focusout(function() {\n            $('.contextmenu').remove();\n        });\n    }\n\n}\n\n/*function removeMapMenu(){\n    $('.contextmenu').remove();\n}\n  //\n  drawingManager.setMap(map);\n\n\n}\n*/\n// Snap a user-created polyline to roads and draw the snapped path\nfunction runSnapToRoad(path) {\n    var pathValues = [];\n    var currPts = path.getAt(0);\n    for (var i = 0; i < path.getLength(); i++) {\n        pathValues.push(path.getAt(i).toUrlValue());\n    }\n    console.log(pathValues);\n\n    $.get('https://roads.googleapis.com/v1/snapToRoads', {\n        interpolate: true,\n        key: apiKey,\n        path: pathValues.join('|')\n    }, function(data) {\n        processSnapToRoadResponse(data, currPts);\n\n        //drawSnappedPolyline();\n    });\n}\n\n// Store snapped polyline returned by the snap-to-road service.\nfunction processSnapToRoadResponse(data, currPts) {\n    snappedCoordinates = [];\n    placeIdArray = [];\n    var dist = 0;\n    for (var i = 0; i < data.snappedPoints.length; i++) {\n        var latlng = new google.maps.LatLng(\n            data.snappedPoints[i].location.latitude,\n            data.snappedPoints[i].location.longitude);\n        snappedCoordinates.push(latlng);\n        placeIdArray.push(data.snappedPoints[i].placeId);\n    }\n    dist = google.maps.geometry.spherical.computeDistanceBetween(latlng, currPts);\n    console.log(google.maps.geometry.spherical.computeDistanceBetween(latlng, currPts));\n    showMapMenu(currPts, dist);\n}\n\n// Draws the snapped polyline (after processing snap-to-road response).\n/*function drawSnappedPolyline() {\n    var snappedPolyline = new google.maps.Polyline({\n        path: snappedCoordinates,\n        strokeColor: 'black',\n        strokeWeight: 3,\n        opacity: 1\n    });\n\n    snappedPolyline.setMap(map);\n    //polylines.push(snappedPolyline);\n}\n*/\n\nvar getLat = () => {\n    console.log(\"dis\" + lat);\n    return lat;\n};\n\nvar getLong = () => {\n    console.log(\"dis2\" + long);\n    return long;\n};\n\n  export default Index;"]},"metadata":{},"sourceType":"module"}